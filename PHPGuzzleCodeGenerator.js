// Generated by CoffeeScript 1.8.0
(function() {
  var PHPGuzzleCodeGenerator, addslashes;

  require("mustache.js");

  require("URI.js");

  addslashes = function(str) {
    return ("" + str).replace(/[\\"]/g, '\\$&');
  };

  PHPGuzzleCodeGenerator = function() {
    this.url = function(request) {
      var name, url_params, url_params_object, value;
      url_params_object = (function() {
        var _uri;
        _uri = URI(request.url);
        return _uri.search(true);
      })();
      url_params = (function() {
        var _results;
        _results = [];
        for (name in url_params_object) {
          value = url_params_object[name];
          _results.push({
            "name": addslashes(name),
            "value": addslashes(value)
          });
        }
        return _results;
      })();
      return {
        "base": addslashes((function() {
          var _uri;
          _uri = URI(request.url);
          _uri.search("");
          return _uri;
        })()),
        "params": url_params,
        "has_params": url_params.length > 0
      };
    };
    this.headers = function(request) {
      var header_name, header_value, headers;
      headers = request.headers;
      return {
        "has_headers": Object.keys(headers).length > 0,
        "header_list": (function() {
          var _results;
          _results = [];
          for (header_name in headers) {
            header_value = headers[header_name];
            _results.push({
              "header_name": addslashes(header_name),
              "header_value": addslashes(header_value)
            });
          }
          return _results;
        })()
      };
    };
    this.body = function(request) {
      var json_body, multipart_body, name, raw_body, url_encoded_body, value;
      json_body = request.jsonBody;
      if (json_body) {
        return {
          "has_body": true,
          "has_json_body": true,
          "json_body_object": this.json_body_object(json_body, 2)
        };
      }
      url_encoded_body = request.urlEncodedBody;
      if (url_encoded_body) {
        return {
          "has_body": true,
          "has_url_encoded_body": true,
          "url_encoded_body": (function() {
            var _results;
            _results = [];
            for (name in url_encoded_body) {
              value = url_encoded_body[name];
              _results.push({
                "name": addslashes(name),
                "value": addslashes(value)
              });
            }
            return _results;
          })()
        };
      }
      multipart_body = request.multipartBody;
      if (multipart_body) {
        return {
          "has_body": true,
          "has_multipart_body": true,
          "multipart_body": (function() {
            var _results;
            _results = [];
            for (name in multipart_body) {
              value = multipart_body[name];
              _results.push({
                "name": addslashes(name),
                "value": addslashes(value)
              });
            }
            return _results;
          })()
        };
      }
      raw_body = request.body;
      if (raw_body) {
        if (raw_body.length < 5000) {
          return {
            "has_body": true,
            "has_raw_body": true,
            "raw_body": addslashes(raw_body)
          };
        } else {
          return {
            "has_body": true,
            "has_long_body": true
          };
        }
      }
    };
    this.json_body_object = function(object, indent) {
      var indent_str, indent_str_children, key, s, value;
      if (indent == null) {
        indent = 0;
      }
      if (object === null) {
        s = "null";
      } else if (typeof object === 'string') {
        s = "\"" + (addslashes(object)) + "\"";
      } else if (typeof object === 'number') {
        s = "" + object;
      } else if (typeof object === 'boolean') {
        s = "" + (object ? "true" : "false");
      } else if (typeof object === 'object') {
        indent_str = Array(indent + 1).join('    ');
        indent_str_children = Array(indent + 2).join('    ');
        if (object.length != null) {
          s = "array(\n" + ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = object.length; _i < _len; _i++) {
              value = object[_i];
              _results.push("" + indent_str_children + (this.json_body_object(value, indent + 1)));
            }
            return _results;
          }).call(this)).join(',\n') + ("\n" + indent_str + ")");
        } else {
          s = "array(\n" + ((function() {
            var _results;
            _results = [];
            for (key in object) {
              value = object[key];
              _results.push("" + indent_str_children + "\"" + (addslashes(key)) + "\" => " + (this.json_body_object(value, indent + 1)));
            }
            return _results;
          }).call(this)).join(',\n') + ("\n" + indent_str + ")");
        }
      }
      return s;
    };
    this.generate = function(context) {
      var request, template, view;
      request = context.getCurrentRequest();
      view = {
        "request": context.getCurrentRequest(),
        "method": request.method.toUpperCase(),
        "url": this.url(request),
        "headers": this.headers(request),
        "body": this.body(request)
      };
      template = readFile("php.mustache");
      return Mustache.render(template, view);
    };
  };

  PHPGuzzleCodeGenerator.identifier = "com.luckymarmot.PawExtensions.PHPGuzzleCodeGenerator";

  PHPGuzzleCodeGenerator.title = "PHP (Guzzle)";

  registerCodeGenerator(PHPGuzzleCodeGenerator);

}).call(this);
